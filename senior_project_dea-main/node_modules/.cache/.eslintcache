[{"C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\index.js":"1","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\App.js":"2","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\reportWebVitals.js":"3","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Profile.js":"4","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\UserInfo.js":"5","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\SignUp.js":"6","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Welcome.js":"7","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Game.js":"8","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Admin.js":"9","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Navbar.js":"10","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Learn.js":"11","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Login.js":"12","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\LoginBanner.js":"13"},{"size":707,"mtime":1676348384800,"results":"14","hashOfConfig":"15"},{"size":1615,"mtime":1676348384758,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1676348384802,"results":"17","hashOfConfig":"15"},{"size":5631,"mtime":1676348384772,"results":"18","hashOfConfig":"15"},{"size":1039,"mtime":1676348384775,"results":"19","hashOfConfig":"15"},{"size":2910,"mtime":1679816922791,"results":"20","hashOfConfig":"15"},{"size":2858,"mtime":1676348384777,"results":"21","hashOfConfig":"15"},{"size":10849,"mtime":1679821304957,"results":"22","hashOfConfig":"15"},{"size":3489,"mtime":1676348384762,"results":"23","hashOfConfig":"15"},{"size":2245,"mtime":1676348384771,"results":"24","hashOfConfig":"15"},{"size":29856,"mtime":1679822570666,"results":"25","hashOfConfig":"15"},{"size":2393,"mtime":1676348384767,"results":"26","hashOfConfig":"15"},{"size":1112,"mtime":1676348384769,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"m6cnda",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},"C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\index.js",[],[],"C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\App.js",["75","76","77"],[],"import './App.css';\r\nimport MyNavbar from './components/Navbar';\r\nimport MyWelcomePage from './components/Welcome';\r\nimport LearnPage from './components/Learn';\r\nimport GamePage from './components/Game';\r\nimport ProfilePage from './components/Profile';\r\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\"\r\nimport Login from './components/Login'\r\nimport SignUp from './components/SignUp'\r\nimport UserInfo from './components/UserInfo'\r\nimport Admin from './components/Admin'\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nfunction App() {\r\n  const { pathname } = useLocation();\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <div className=\"auth-wrapper\">\r\n          <div className=\"auth-inner\">\r\n          { (pathname !== '/sign-in' && pathname !== '/sign-up' && pathname != '/') && <MyNavbar /> }\r\n            <Routes>\r\n              <Route path=\"/welcome\" element={<MyWelcomePage />} />\r\n              <Route path=\"/learn\" element={<LearnPage />} />\r\n              <Route path=\"/game\" element={<GamePage />} />\r\n              <Route path=\"/myprofile\" element={<ProfilePage />} />\r\n              <Route exact path=\"/\" element={<Login />} />\r\n              <Route path=\"/sign-in\" element={<Login />} />\r\n              <Route path=\"/sign-up\" element={<SignUp />} />\r\n              <Route path=\"/userInfo\" element={<UserInfo />} />\r\n              <Route path=\"/admin\" element={<Admin />} />\r\n            </Routes>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\reportWebVitals.js",[],[],"C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Profile.js",["78"],[],"import React from 'react';\r\nimport './personalProfile.css';\r\nimport { MDBCol, MDBContainer, MDBRow, MDBCard, MDBCardText, MDBCardBody, MDBCardImage, MDBTypography, MDBIcon, MDBProgress, MDBProgressBar, MDBBtn } from 'mdb-react-ui-kit';\r\n\r\nexport default class ProfilePage extends React.Component {\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        userInfo: null\r\n      };\r\n    }\r\n    componentDidMount(){\r\n      fetch(\"http://localhost:5000/userInfo\", \r\n        {\r\n          method: \"POST\",\r\n          crossDomain:true,\r\n          headers:{\r\n            \"Content-Type\":\"application/json\",\r\n            Accept:\"application/json\",\r\n            \"Access-Control-Allow-Origin\":\"*\",\r\n        },\r\n        body:JSON.stringify({\r\n          token:window.localStorage.getItem(\"token\"),\r\n        }),\r\n        }).then((res)=>res.json())\r\n        .then(data=>{\r\n          this.setState({userInfo: data.data});\r\n        });\r\n    }\r\n    render(){\r\n      const container = {\r\n        display: \"block\",        \r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",        \r\n        fontFamily:\"Gluten\",\r\n        paddingTop: \"50px\"\r\n    \r\n      };\r\n      const heading = {\r\n        fontFamily: \"Gluten\",\r\n        color: \"#2613fe\",\r\n        fontSize: \"40px\",\r\n        paddingBottom: \"10px\",\r\n        textDecorationLine: \"underline\"\r\n    \r\n      };\r\n      \r\n      if(this.state.userInfo == null){\r\n        return <div></div>\r\n      }\r\n      var fullName = this.state.userInfo[\"fname\"] + \" \" + this.state.userInfo[\"lname\"];\r\n      var email = this.state.userInfo[\"email\"];\r\n      var gameScore = this.state.userInfo[\"gamescore\"].reduce((a, b) => a + b, 0);\r\n      var gameMax = this.state.userInfo[\"gamescore\"].length;\r\n      var gamePercentage = Math.floor(gameScore/gameMax * 100);\r\n      var learnScore = this.state.userInfo[\"learnscore\"].reduce((a, b) => a + b, 0);\r\n      var learnMax = this.state.userInfo[\"learnscore\"].length;\r\n      var learnPercentage = Math.floor(learnScore/learnMax * 100);\r\n      return (\r\n        <section style={container}>\r\n          <h4 style={heading}>My Profile</h4>\r\n          <MDBContainer className=\"py-5 h-100\">\r\n            <MDBRow className=\"justify-content-center align-items-center h-100\">\r\n              <MDBCol lg=\"8\" className=\"mb-4 mb-lg-0\">\r\n                <MDBCard style={{ borderRadius: '.5rem' }}>\r\n                  <MDBRow className=\"g-0\">\r\n                    <MDBCol md=\"4\" className=\"gradient-custom text-center text-white\"\r\n                      style={{ borderTopLeftRadius: '.5rem', borderBottomLeftRadius: '.5rem' }}>\r\n                      <MDBCardImage src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava1-bg.webp\"\r\n                        alt=\"Avatar\" className=\"my-5\" style={{ width: '80px' }} fluid />\r\n                      <MDBTypography tag=\"h5\">{fullName}</MDBTypography>\r\n                      <MDBCardText>CS Undergraduate</MDBCardText>  \r\n                      <MDBBtn outline color=\"light\" style={{height: '36px', overflow: 'visible'}}>\r\n                        Edit profile\r\n                      </MDBBtn>             \r\n                    </MDBCol>\r\n                    <MDBCol md=\"8\">\r\n                      <MDBCardBody className=\"p-4\">\r\n                        <MDBTypography tag=\"h6\">Information</MDBTypography>\r\n                        <hr className=\"mt-0 mb-4\" />\r\n                        <MDBRow className=\"pt-1\">\r\n                          <MDBCol size=\"6\" className=\"mb-3\">\r\n                            <MDBTypography tag=\"h6\">Email</MDBTypography>\r\n                            <MDBCardText className=\"text-muted\">{email}</MDBCardText>\r\n                          </MDBCol>\r\n                          <MDBCol size=\"6\" className=\"mb-3\">\r\n                            <MDBTypography tag=\"h6\">Password</MDBTypography>\r\n                            <MDBCardText className=\"text-muted\">*********</MDBCardText>\r\n                          </MDBCol>\r\n                        </MDBRow>\r\n                        <MDBTypography tag=\"h6\">My Progress</MDBTypography>\r\n                        <hr className=\"mt-0 mb-4\" />\r\n                        <MDBRow className=\"pt-1\">\r\n                          <MDBCol size=\"6\" className=\"mb-3\">\r\n                            <MDBTypography tag=\"h6\">Learn</MDBTypography>\r\n                            <MDBProgress className=\"rounded\" height='30'>\r\n                            <MDBProgressBar striped animated width={learnPercentage} valuemin={0} valuemax={100}> {learnPercentage}% </MDBProgressBar>\r\n                            </MDBProgress>\r\n                            <MDBCardText style={{paddingTop:'20px'}}>{learnScore}/{learnMax} Sections Completed</MDBCardText>\r\n                          </MDBCol>\r\n                          <MDBCol size=\"6\" className=\"mb-3\">\r\n                            <MDBTypography tag=\"h6\">Game</MDBTypography>\r\n                            <MDBProgress className=\"rounded\" height='30'>\r\n                            <MDBProgressBar striped animated width={gamePercentage} valuemin={0} valuemax={100}> {gamePercentage}% </MDBProgressBar>\r\n                            </MDBProgress>  \r\n                            <MDBCardText style={{paddingTop:'20px'}}>{gameScore}/{gameMax} Games Completed</MDBCardText>                      \r\n                          </MDBCol>\r\n                        </MDBRow>                    \r\n                      </MDBCardBody>\r\n                    </MDBCol>\r\n                  </MDBRow>\r\n                </MDBCard>\r\n              </MDBCol>\r\n            </MDBRow>\r\n          </MDBContainer>\r\n      </section>\r\n    );\r\n    }\r\n    \r\n}","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\UserInfo.js",[],[],"C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\SignUp.js",["79","80"],[],"import React, { Component } from 'react'\r\nimport './LoginAndSignUp.css';\r\nimport LoginBanner from './LoginBanner';\r\nimport gator from '../images/gator.png';\r\n\r\nexport default class SignUp extends Component {\r\n  constructor(props){\r\n    super (props)\r\n    this.state={\r\n      fname:\"\",\r\n      lname:\"\",\r\n      email:\"\",\r\n      password:\"\"\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleSubmit(e){\r\n    e.preventDefault();\r\n    const{fname, lname, email, password} = this.state;\r\n    console.log(fname, lname, email, password);\r\n    fetch(\"http://localhost:5000/register\", {\r\n      method: \"POST\",\r\n      mode: 'no-cors',\r\n      crossDomain:true,\r\n      headers:{\r\n        \"Content-Type\":\"application/json\",\r\n        Accept:\"application/json\",\r\n        \"Access-Control-Allow-Origin\":\"*\",\r\n      },\r\n      body:JSON.stringify({\r\n        fname,\r\n        lname,\r\n        email,\r\n        password\r\n      }),\r\n    }).then((res)=>res.json())\r\n    .then((data)=>{\r\n      console.log(data,\"userRegister\");\r\n      if(data.status==\"ok\"){\r\n        alert(\"Registration was successful\");\r\n        window.location.href=\"./sign-in\"\r\n      }\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <LoginBanner/>\r\n        <br/>\r\n        <img className=\"gator-image\" src={gator}  />\r\n        <form onSubmit={this.handleSubmit}>\r\n          <h3 className='title-name'>Sign Up</h3>\r\n\r\n          <div className=\"mb-3\">\r\n            <label>First name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter first name...\"\r\n              onChange={e=>this.setState({fname:e.target.value})}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-3\">\r\n            <label>Last name</label>\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Enter last name...\" onChange={e=>this.setState({lname:e.target.value})}/>\r\n          </div>\r\n\r\n          <div className=\"mb-3\">\r\n            <label>Email </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter email...\"\r\n              onChange={e=>this.setState({email:e.target.value})}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-3\">\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter password...\"\r\n              onChange={e=>this.setState({password:e.target.value})}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"d-grid\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Sign Up\r\n            </button>\r\n          </div>\r\n          <p className=\"forgot-password text-right\">\r\n            Already registered? <a href=\"/sign-in\">Sign in!</a>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Welcome.js",["81","82","83"],[],"import React from 'react';\r\nimport {\r\n  MDBCarousel,\r\n  MDBCarouselItem,\r\n} from 'mdb-react-ui-kit';\r\n\r\nexport default class WelcomePage extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      userInfo: null\r\n    };\r\n  }\r\n  componentDidMount(){\r\n    fetch(\"http://localhost:5000/userInfo\", \r\n      {\r\n        method: \"POST\",\r\n        crossDomain:true,\r\n        headers:{\r\n          \"Content-Type\":\"application/json\",\r\n          Accept:\"application/json\",\r\n          \"Access-Control-Allow-Origin\":\"*\",\r\n      },\r\n      body:JSON.stringify({\r\n        token:window.localStorage.getItem(\"token\"),\r\n      }),\r\n      }).then((res)=>res.json())\r\n      .then(data=>{\r\n        this.setState({userInfo: data.data});\r\n      });\r\n  }\r\n  render(){\r\n    const carousel = {           \r\n                   \r\n        position: \"absolute\",\r\n        top: \"calc(50% + 40px)\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    }\r\n\r\n    const title = {\r\n        fontFamily:\"Gluten\",        \r\n        color:\"white\"\r\n    }\r\n\r\n    const caption = {\r\n        fontFamily:\"Gluten\",\r\n        color:\"white\"\r\n    }\r\n\r\n    const image = {\r\n        height:\"8rem\"\r\n    }\r\n\r\n \r\n    if(this.state.userInfo == null){\r\n      return <div></div>\r\n    }\r\n    var name = this.state.userInfo[\"fname\"];\r\n\r\n  return (\r\n    <MDBCarousel showControls showIndicators style={carousel}>\r\n      <MDBCarouselItem        \r\n        className='w-100 d-block'\r\n        itemId={1}\r\n        src='./welcomeBkgdBlue.png'\r\n        alt='...'\r\n        \r\n      >\r\n        <img src='./welcomeImg.png' style={image}></img>\r\n        <h5 style={title}>Welcome {name}!</h5>\r\n        <p style={caption}>Please navigate to the \"Learn\" page to read up on important topics, and then head over to the \"Game\" page to test your knowledge.</p>\r\n      </MDBCarouselItem>\r\n      <MDBCarouselItem\r\n        className='w-100 d-block'\r\n        itemId={2}\r\n        src='./welcomeBkgdOrange.png'\r\n        alt='...'\r\n      >\r\n        <img src='./scoreImg.png' style={image}></img>\r\n        <h5 style={title}>Checking Your Score</h5>\r\n        <p style={caption}>Take a look at your \"My Profile\" page to see your progress. There you can see how many sections and game questions you have completed. Keep up the great work!</p>\r\n      </MDBCarouselItem>\r\n      <MDBCarouselItem        \r\n        className='w-100 d-block'\r\n        itemId={3}\r\n        src='./welcomeBkgdBlue.png'\r\n        alt='...'\r\n      >\r\n        <img src='./creatorImg.png' style={image}></img>\r\n        <h5 style={title}>The Creators</h5>\r\n        <p style={caption}>This website was created by University of Florida students Daymao Silva, Erick Gonzalez, and Annalina Becker for their Fall 2022 senior project. They were advised under Professor Cheryl Resch.</p>\r\n      </MDBCarouselItem>\r\n    </MDBCarousel>\r\n  );\r\n}}","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Game.js",[],[],"C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Admin.js",["84","85"],[],"import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nexport default class Admin extends React.Component {\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        allUsers: null\r\n      };\r\n    }\r\n    componentDidMount(){\r\n      fetch(\"http://localhost:5000/allUsers\", \r\n        {\r\n          method: \"POST\",\r\n          crossDomain:true,\r\n          headers:{\r\n            \"Content-Type\":\"application/json\",\r\n            Accept:\"application/json\",\r\n            \"Access-Control-Allow-Origin\":\"*\",\r\n        },\r\n        body:JSON.stringify({\r\n          token:window.localStorage.getItem(\"token\"),\r\n        }),\r\n        }).then((res)=>res.json())\r\n        .then(data=>{\r\n            console.log(\"data: \")\r\n            console.log(data)\r\n          this.setState({allUsers: data});\r\n        });\r\n    }\r\n    render(){\r\n        console.log(\"all users:\")\r\n        console.log(this.state.allUsers);\r\n      if(this.state.allUsers == null){\r\n        return <div></div>\r\n      }\r\n      function createLearnView(user){\r\n        var learnScore = user[\"learnscore\"].reduce((a, b) => a + b, 0);\r\n        var learnMax = user[\"learnscore\"].length;\r\n        var totalScore = [\"Total Score: \"+learnScore+\"/\"+learnMax+\"\\n\",\"\\n\"]\r\n        var learnView = []\r\n        for(var i=0; i<user[\"learnscore\"].length; i++){\r\n            var message = \"Incomplete\"\r\n            var textColor = \"red\"\r\n            if(user[\"learnscore\"][i] == 1){\r\n                message = \"Complete   \"\r\n                textColor = \"limegreen\"\r\n            }\r\n            var element = <div style={{color: textColor}}>{(i+1)+\": \"+message+\"\\n\"}</div>\r\n            learnView.push(element)\r\n        }\r\n        return <th style={{whiteSpace:\"pre-wrap\", wordWrap:\"break-word\"}}>{totalScore}{learnView}</th>\r\n      }\r\n      function createGameView(user){\r\n        var gameScore = user[\"gamescore\"].reduce((a, b) => a + b, 0);\r\n        var gameMax = user[\"gamescore\"].length;\r\n        var totalScore = [\"Total Score: \"+gameScore+\"/\"+gameMax+\"\\n\",\"\\n\"]\r\n        var gameView = []\r\n        for(var i=0; i<user[\"gamescore\"].length; i++){\r\n            var message = \"Incomplete\"\r\n            var textColor = \"red\"\r\n            if(user[\"gamescore\"][i] == 1){\r\n                message = \"Complete   \"\r\n                textColor = \"limegreen\"\r\n            }\r\n            var element = <div style={{color: textColor}}>{(i+1)+\": \"+message+\"\\n\"}</div>\r\n            gameView.push(element)\r\n        }\r\n        return <th style={{whiteSpace:\"pre-wrap\", wordWrap:\"break-word\"}}>{totalScore}{gameView}</th>\r\n      }\r\n\r\n      return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                <th>#</th>\r\n                <th>First Name</th>\r\n                <th>Last Name</th>\r\n                <th>Email</th>\r\n                <th>Learn Sections</th>\r\n                <th>Game Sections</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                this.state.allUsers.map((user, index) => (\r\n                    <tr>\r\n                        <td>{index}</td>\r\n                        <td>{user[\"fname\"]}</td>\r\n                        <td>{user[\"lname\"]}</td>\r\n                        <td>{user[\"email\"]}</td>\r\n                        {createLearnView(user)}\r\n                        {createGameView(user)}\r\n                    </tr>\r\n                ))\r\n                }\r\n            </tbody>\r\n        </Table>\r\n\r\n      );\r\n    }\r\n    \r\n}","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Navbar.js",[],[],"C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Learn.js",["86","87","88","89","90","91","92"],[],"import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction updateScore(token_, section_, index_) {\r\n  fetch(\"http://localhost:5000/updatescore\", {\r\n    method: \"PUT\",\r\n    crossDomain: true,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n    body: JSON.stringify({\r\n      token: token_,\r\n      section: section_,\r\n      index: index_,\r\n    }),\r\n  }).then((res) => res.json())\r\n    .then((data) => {\r\n      console.log(data, \"updatescore\");\r\n    })\r\n}\r\n\r\nfunction checkAnswer1() {\r\n\r\n  var selectionQ1 = document.getElementById(\"q1option1\");\r\n  if (selectionQ1.checked == true) {\r\n    alert(\"Correct!\");\r\n    updateScore(window.localStorage.getItem(\"token\"), \"learn\", \"0\");\r\n  }\r\n  else {\r\n    alert(\"Incorrect. Try again!\");\r\n  }\r\n}\r\n\r\n\r\nfunction checkAnswer2() {\r\n\r\n  var selectionQ2 = document.getElementById(\"q2option3\");\r\n  if (selectionQ2.checked == true) {\r\n    alert(\"Correct!\");\r\n    updateScore(window.localStorage.getItem(\"token\"), \"learn\", \"1\");\r\n  }\r\n  else {\r\n    alert(\"Incorrect. Try again!\");\r\n  }\r\n}\r\n\r\nfunction checkAnswer3() {\r\n\r\n  var selectionQ3 = document.getElementById(\"q3option2\");\r\n  if (selectionQ3.checked == true) {\r\n    alert(\"Correct!\");\r\n    updateScore(window.localStorage.getItem(\"token\"), \"learn\", \"2\");\r\n  }\r\n  else {\r\n    alert(\"Incorrect. Try again!\");\r\n  }\r\n}\r\n\r\nfunction checkAnswer4() {\r\n\r\n  var selectionQ4 = document.getElementById(\"q4option1\");\r\n  if (selectionQ4.checked == true) {\r\n    alert(\"Correct!\");\r\n    updateScore(window.localStorage.getItem(\"token\"), \"learn\", \"3\");\r\n  }\r\n  else {\r\n    alert(\"Incorrect. Try again!\");\r\n  }\r\n}\r\n\r\nfunction checkAnswer5() {\r\n\r\n  var selectionQ5 = document.getElementById(\"q5option3\");\r\n  if (selectionQ5.checked == true) {\r\n    alert(\"Correct!\");\r\n    updateScore(window.localStorage.getItem(\"token\"), \"learn\", \"4\");\r\n  }\r\n  else {\r\n    alert(\"Incorrect. Try again!\");\r\n  }\r\n}\r\n\r\nfunction checkAnswer6() {\r\n\r\n  var selectionQ6 = document.getElementById(\"q6option2\");\r\n  if (selectionQ6.checked == true) {\r\n    alert(\"Correct!\");\r\n    updateScore(window.localStorage.getItem(\"token\"), \"learn\", \"5\");\r\n  }\r\n  else {\r\n    alert(\"Incorrect. Try again!\");\r\n  }\r\n}\r\n\r\nfunction checkAnswer7() {\r\n\r\n  var selectionQ7 = document.getElementById(\"q7option4\");\r\n  if (selectionQ7.checked == true) {\r\n    alert(\"Correct!\");\r\n    updateScore(window.localStorage.getItem(\"token\"), \"learn\", \"6\");\r\n  }\r\n  else {\r\n    alert(\"Incorrect. Try again!\");\r\n  }\r\n}\r\n\r\nfunction LearnPage() {\r\n\r\n\r\n\r\n  const container = {\r\n    display: \"block\",\r\n    width: \"80%\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    paddingTop: \"50px\"\r\n\r\n  };\r\n\r\n  const heading = {\r\n    fontFamily: \"Gluten\",\r\n    color: \"#2613fe\",\r\n    fontSize: \"40px\",\r\n    paddingBottom: \"50px\",\r\n    textDecorationLine: \"underline\"\r\n\r\n  };\r\n\r\n  const tabs = {\r\n    fontFamily: \"Gluten\",\r\n    color: \"#2613fe\"\r\n\r\n  };\r\n\r\n  const tab = {\r\n\r\n    padding: \"30px\",\r\n    boxShadow: \"0 3px 10px rgba(0,0,0,.3)\",\r\n    fontFamily: \"Gluten\",\r\n    marginBottom: \"80px\"\r\n\r\n  };\r\n\r\n  const list = {\r\n    listStyleType: \"circle\",\r\n    listStylePosition: \"inside\",\r\n    display: \"inline-block\"\r\n  };\r\n\r\n  const spaceAfterQ = {\r\n    paddingTop: \"10px\"\r\n  }\r\n\r\n  const [answer1, setSelection1] = React.useState('');\r\n  const onChange1 = e => {\r\n    setSelection1(e.target.value)\r\n  }\r\n\r\n  const [answer2, setSelection2] = React.useState('');\r\n  const onChange2 = e => {\r\n    setSelection2(e.target.value)\r\n  }\r\n\r\n  const [answer3, setSelection3] = React.useState('');\r\n  const onChange3 = e => {\r\n    setSelection3(e.target.value)\r\n  }\r\n\r\n  const [answer4, setSelection4] = React.useState('');\r\n  const onChange4 = e => {\r\n    setSelection4(e.target.value)\r\n  }\r\n\r\n  const [answer5, setSelection5] = React.useState('');\r\n  const onChange5 = e => {\r\n    setSelection5(e.target.value)\r\n  }\r\n\r\n  const [answer6, setSelection6] = React.useState('');\r\n  const onChange6 = e => {\r\n    setSelection6(e.target.value)\r\n  }\r\n\r\n  const [answer7, setSelection7] = React.useState('');\r\n  const onChange7 = e => {\r\n    setSelection7(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div id=\"learndiv\" style={container}>\r\n      <h4 style={heading}>Learn</h4>\r\n      <Tabs fill justify defaultActiveKey=\"first\" style={tabs}>\r\n        <Tab eventKey=\"first\" title=\"Input Validation\" style={tab}>\r\n          Input validation is used to check the data that is being entered to ensure it is of the proper form. It should be applied to both syntactical and semantic levels and occur as soon as data is being entered from the user.\r\n          <div style={{ paddingTop: \"15px\", width: \"70%\", alignItems: \"center\", marginLeft: \"auto\", marginRight: \"auto\" }}><ul style={list}>\r\n            <li><strong>Syntactic:</strong> Arrangement of data in fields. i.e. Data is of the form MM-DD-YYYY. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <li><strong>Semantic:</strong> Correctness of values. i.e. Start date is before end date. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <div style={{ paddingBottom: \"10px\" }}></div>\r\n          </ul>\r\n            <div style={spaceAfterQ}></div>\r\n          </div> Q: Input validation should happen as early as possible. True or False?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q1option1\"\r\n                      inline\r\n                      label=\"True\"\r\n                      name=\"answer1\"\r\n                      type={type}\r\n                      value=\"True\"\r\n                      checked={answer1 === \"True\"}\r\n                      onChange={onChange1}\r\n\r\n                    />\r\n                    <Form.Check id=\"q1option2\"\r\n                      inline\r\n                      label=\"False\"\r\n                      name=\"answer1\"\r\n                      type={type}\r\n                      value=\"False\"\r\n                      checked={answer1 === \"False\"}\r\n                      onChange={onChange1}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer1}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer1}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n\r\n          Sourced from OWASP.\r\n        </Tab>\r\n        <Tab eventKey=\"second\" title=\"Encoding & Escaping\" style={tab}>\r\n          Encoding and escaping can help prevent injection attacks, which will be discussed in the later sections. Encoding involves translating characters into another form. Escaping is used when not all of the characters have to be encoded. Here, a certain character is placed before a string or character to avoid misinterpretation. An example of this is placing a <strong>\\</strong> character in front of <strong>\"</strong> so that the <strong>\"</strong> is interpreted as part of the string or text.\r\n          <div style={{ paddingTop: \"15px\", width: \"70%\", alignItems: \"center\", marginLeft: \"auto\", marginRight: \"auto\" }}>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div> Q: Which symbol do you use to escape?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q2option1\"\r\n                      inline\r\n                      label=\".\"\r\n                      name=\"answer2\"\r\n                      type={type}\r\n                      value=\".\"\r\n                      checked={answer2 === \".\"}\r\n                      onChange={onChange2}\r\n\r\n                    />\r\n                    <Form.Check id=\"q2option2\"\r\n                      inline\r\n                      label=\"?\"\r\n                      name=\"answer2\"\r\n                      type={type}\r\n                      value=\"?\"\r\n                      checked={answer2 === \"?\"}\r\n                      onChange={onChange2}\r\n\r\n                    />\r\n                    <Form.Check id=\"q2option3\"\r\n                      inline\r\n                      label=\"\\\"\r\n                      name=\"answer2\"\r\n                      type={type}\r\n                      value=\"\\\"\r\n                      checked={answer2 === \"\\\\\"}\r\n                      onChange={onChange2}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer2}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer2}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n\r\n          Sourced from OWASP.\r\n        </Tab>\r\n        <Tab eventKey=\"third\" title=\"Cross-Site Scripting\" style={tab}>\r\n          Cross-site scripting (XSS) is when an attacker inserts malicious scripts, usually JavaScript, into a web application. When the browser sees the script, it executes the code. This type of attack is one of the most common vulnerabilities. But, most of the time the vulnerabilities are hidden like through a link or an e-mail. The three types of cross-site scripting are as follows:\r\n          <div style={{ paddingTop: \"15px\", width: \"70%\", alignItems: \"center\", marginLeft: \"auto\", marginRight: \"auto\" }}><ul style={list}>\r\n            <li><strong>Reflected:</strong> Malicious code that is embedded in the HTTP request is \"reflected\" back to the user. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <li><strong>Stored:</strong> Web application stores the malicious code in a server or database and passes it on to other users.</li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <li><strong>Document Object Model (DOM)-based:</strong> Triggered by JavaScript events and runs immediately. The attack is embedded into the existing webpage. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n          </ul>\r\n            One case of XSS is an insertion using the script tag. For example, a possible script could be <strong>&lt;script&gt;alert('Display message here')&lt;/script&gt;</strong>, and the page would execute the script.\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div> Q: The reflected type of XSS is stored within a database. True or False?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q3option1\"\r\n                      inline\r\n                      label=\"True\"\r\n                      name=\"answer3\"\r\n                      type={type}\r\n                      value=\"True\"\r\n                      checked={answer3 === \"True\"}\r\n                      onChange={onChange3}\r\n\r\n                    />\r\n                    <Form.Check id=\"q3option2\"\r\n                      inline\r\n                      label=\"False\"\r\n                      name=\"answer3\"\r\n                      type={type}\r\n                      value=\"False\"\r\n                      checked={answer3 === \"False\"}\r\n                      onChange={onChange3}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer3}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer3}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n\r\n          Sourced from CodePath, OWASP, and Veracode.\r\n        </Tab>\r\n        <Tab eventKey=\"fourth\" title=\"SQL Injection\" style={tab}>\r\n          SQL injection happens when an attacker inputs a SQL statement into a user input, allowing the attacker to view data that they should not be able to access. This attack can allow modification of a database using Insert/Update/Delete or even gaining control to root user privileges.  <div style={spaceAfterQ}></div>\r\n          The best way to prevent this attack is by sanitizing input, which means escaping certain SQL characters. One example is to not run a script tag, you can type a less than or greater than sign using '&lt' and '&gt'. Additionally, only giving the least amount of privilege necessary is also a great principle to follow.\r\n          <div style={spaceAfterQ}></div>\r\n          Structured Query Language (SQL) uses the form 'SELECT FROM WHERE' where one example is that you can SELECT attribute FROM relation WHERE attribute=value in a database. One example could be (SELECT * FROM Users WHERE userID='1234' OR 1=1), where the 1=1 is always true and * means all. Therefore, an attacker could insert '1234 OR 1=1' into a field and may be able to get access to all user information. Additionally, if an attacker wanted adminstrator access they could insert a username such as admin'-- to complete the WHERE clause. The -- indicates the start of a comment in SQL and could be used to bypass the password field.\r\n          <div style={spaceAfterQ}></div>\r\n          <div style={spaceAfterQ}></div>\r\n          <div style={spaceAfterQ}></div>\r\n          Q: Which of the following is a good technique to use to prevent SQL injections?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q4option1\"\r\n                      inline\r\n                      label=\"Least privilege principle\"\r\n                      name=\"answer4\"\r\n                      type={type}\r\n                      value=\"Least privilege principle\"\r\n                      checked={answer4 === \"Least privilege principle\"}\r\n                      onChange={onChange4}\r\n\r\n                    />\r\n                    <Form.Check id=\"q4option2\"\r\n                      inline\r\n                      label=\"Most privilege principle\"\r\n                      name=\"answer4\"\r\n                      type={type}\r\n                      value=\"Most privilege principle\"\r\n                      checked={answer4 === \"Most privilege principle\"}\r\n                      onChange={onChange4}\r\n\r\n\r\n                    />\r\n                    <Form.Check id=\"q4option3\"\r\n                      inline\r\n                      label=\"Cleaning\"\r\n                      name=\"answer4\"\r\n                      type={type}\r\n                      value=\"Cleaning\"\r\n                      checked={answer4 === \"Cleaning\"}\r\n                      onChange={onChange2}\r\n\r\n                    />\r\n                    <Form.Check id=\"q4option4\"\r\n                      inline\r\n                      label=\"Sweeping\"\r\n                      name=\"answer4\"\r\n                      type={type}\r\n                      value=\"Sweeping\"\r\n                      checked={answer4 === \"Sweeping\"}\r\n                      onChange={onChange4}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer4}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer4}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n          Sourced from PortSwigger, CodePath, OWASP, and W3Schools.\r\n        </Tab>\r\n        <Tab eventKey=\"fifth\" title=\"Cryptography\" style={tab}>\r\n          Cryptography involves studying encryption techniques, or keeping information private through encoding. Typically, these techniques involve turning text into cipher text that only the receiver can encode and reveal.\r\n          <div style={{ paddingTop: \"15px\", width: \"70%\", alignItems: \"center\", marginLeft: \"auto\", marginRight: \"auto\" }}><ul style={list}>\r\n            <li><strong>Symmetric Key:</strong> Sender and receiver use one common key. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <li><strong>Hash Functions:</strong> No key. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <li><strong>Asymmetric Key:</strong> A pair of keys is used and includes a private and public one. Only the receiver knows the private key.  </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n          </ul>\r\n          </div>\r\n\r\n          <div style={spaceAfterQ}></div>\r\n          <div style={spaceAfterQ}></div>\r\n          Q: Which of the following types of cryptography do not use a key?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q5option1\"\r\n                      inline\r\n                      label=\"Symmetric key\"\r\n                      name=\"answer5\"\r\n                      type={type}\r\n                      value=\"Symmetric key\"\r\n                      checked={answer5 === \"Symmetric key\"}\r\n                      onChange={onChange5}\r\n\r\n                    />\r\n                    <Form.Check id=\"q5option2\"\r\n                      inline\r\n                      label=\"Asymmetric key\"\r\n                      name=\"answer5\"\r\n                      type={type}\r\n                      value=\"Asymmetric key\"\r\n                      checked={answer5 === \"Asymmetric key\"}\r\n                      onChange={onChange5}\r\n\r\n                    />\r\n                    <Form.Check id=\"q5option3\"\r\n                      inline\r\n                      label=\"Hash functions\"\r\n                      name=\"answer5\"\r\n                      type={type}\r\n                      value=\"Hash functions\"\r\n                      checked={answer5 === \"Hash functions\"}\r\n                      onChange={onChange5}\r\n\r\n\r\n                    />\r\n                    <Form.Check id=\"q5option4\"\r\n                      inline\r\n                      label=\"0-hash\"\r\n                      name=\"answer5\"\r\n                      type={type}\r\n                      value=\"0-hash\"\r\n                      checked={answer5 === \"0-hash\"}\r\n                      onChange={onChange5}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer5}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer5}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n          Sourced from CodePath and GeeksForGeeks.\r\n        </Tab>\r\n        <Tab eventKey=\"sixth\" title=\"User Authentication\" style={tab}>\r\n          User authentication involves confirming the identity of the user that is attempting to access an application or network. In today's society, it is more and more common for additional authentication methods such as \"two-factor\" or \"multi-factor\" to be used to verify the identiy of the user. There are three different categories that explain the types of authentication methods.\r\n\r\n          <div style={spaceAfterQ}></div>\r\n          <div style={spaceAfterQ}></div>\r\n          <div style={{ paddingTop: \"15px\", width: \"70%\", alignItems: \"center\", marginLeft: \"auto\", marginRight: \"auto\" }}><ul style={list}>\r\n            <li><strong>Knowledge:</strong> Includes passwords, PINs, and security questions. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <li><strong>Ownership/Possession:</strong> Includes credit card numbers and key fobs. </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n            <li><strong>Inherence:</strong> Includes DNA, fingerprints, voice, retina.  </li><div style={{ paddingBottom: \"10px\" }}></div>\r\n          </ul>\r\n          </div>\r\n          <div style={spaceAfterQ}></div>\r\n          <div style={spaceAfterQ}></div>\r\n          Q: Possession authentication methods include what the user \"is\". True or False?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q6option1\"\r\n                      inline\r\n                      label=\"True\"\r\n                      name=\"answer6\"\r\n                      type={type}\r\n                      value=\"True\"\r\n                      checked={answer6 === \"True\"}\r\n                      onChange={onChange6}\r\n\r\n                    />\r\n                    <Form.Check id=\"q6option2\"\r\n                      inline\r\n                      label=\"False\"\r\n                      name=\"answer6\"\r\n                      type={type}\r\n                      value=\"False\"\r\n                      checked={answer6 === \"False\"}\r\n                      onChange={onChange6}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer6}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer6}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n          Sourced from CodePath and TechTarget.\r\n        </Tab>\r\n        <Tab eventKey=\"eigth\" title = \"Phishing\" style={tab}>\r\n        Web exploitation is the process of exploiting vulnerabilities in web-based applications to gain access to sensitive data or control over the app. Attackers can exploit these vulnerabilities to take over the entire app, steal sensitive data, or use the app to launch attacks on other systems.\r\n        <div style={{ paddingTop: \"15px\", width: \"70%\", alignItems: \"center\", marginLeft: \"auto\", marginRight: \"auto\" }}>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div> Q: What are the most popular signs of a phishing scam?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q7option1\"\r\n                      inline\r\n                      label=\"A. The email comes with a disclaimer/alert notifying the user that it is spam.\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"A. The email comes with a disclaimer/alert notifying the user that it is spam.\"\r\n                      checked={answer7 === \"A. The email comes with a disclaimer/alert notifying the user that it is spam.\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                    <Form.Check id=\"q7option2\"\r\n                      inline\r\n                      label=\"B. The email is empty and contains nothing in the subject or body.\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"B. The email is empty and contains nothing in the subject or body.\"\r\n                      checked={answer7 === \"B. The email is empty and contains nothing in the subject or body.\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                    <Form.Check id=\"q7option3\"\r\n                      inline\r\n                      label=\"C. An authentic sender sending regular subscribed updates.\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"C. An authentic sender sending regular subscribed updates.\"\r\n                      checked={answer7 === \"C. An authentic sender sending regular subscribed updates.\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                    <Form.Check id=\"q7option4\"\r\n                      inline\r\n                      label=\"D. Inconsistency in the sender’s email ID and how the recipient is addressed.\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"D. Inconsistency in the sender’s email ID and how the recipient is addressed.\"\r\n                      checked={answer7 === \"D. Inconsistency in the sender’s email ID and how the recipient is addressed.\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer7}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer7}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n\r\n          Sourced from InspiredeLearning.\r\n        </Tab>\r\n        <Tab eventKey=\"seventh\" title=\"Web Exploitation\" style={tab}>\r\n          Phishing is a technique used to obtain sensitive information such as names, addresses, bank account numbers, and other personal details. Scammers will create links that redirect users to a fake website that appears to be legitimate. Scammers attempt to instill a sense of urgency in their victims so that they make poor decisions and give away personal information.\r\n          <div style={{ paddingTop: \"15px\", width: \"70%\", alignItems: \"center\", marginLeft: \"auto\", marginRight: \"auto\" }}>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div> Q: What is the most common way of web exploitation?<div style={spaceAfterQ}></div>\r\n          <div>\r\n            <Form>\r\n              {['radio'].map((type) => (\r\n                <div className=\"mb-4\">\r\n                  <Form.Group>\r\n                    <Form.Check id=\"q7option1\"\r\n                      inline\r\n                      label=\"A. SQL Injection\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"A. SQL Injection\"\r\n                      checked={answer7 === \"A. SQL Injection\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                    <Form.Check id=\"q7option2\"\r\n                      inline\r\n                      label=\"B. Directory Traversal\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"B. Directory Traversal\"\r\n                      checked={answer7 === \"B. Directory Traversal\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                    <Form.Check id=\"q7option3\"\r\n                      inline\r\n                      label=\"C. Cross Site Request Forgery\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"C. Cross Site Request Forgery\"\r\n                      checked={answer7 === \"C. Cross Site Request Forgery\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                    <Form.Check id=\"q7option4\"\r\n                      inline\r\n                      label=\"D. Command Execution\"\r\n                      name=\"answer7\"\r\n                      type={type}\r\n                      value=\"D. Command Execution\"\r\n                      checked={answer7 === \"D. Command Execution\"}\r\n                      onChange={onChange7}\r\n\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              ))}\r\n            </Form>\r\n            <Button type=\"submit\" onClick={checkAnswer7}>Submit</Button>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            You selected: <strong>{answer7}</strong>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n            <div style={spaceAfterQ}></div>\r\n          </div>\r\n\r\n          Sourced from CTF101 and Mosse Cyber Security Institute.\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LearnPage;","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\Login.js",["93","94"],[],"import React, { Component } from 'react'\r\nimport LoginBanner from './LoginBanner';\r\nimport './LoginAndSignUp.css';\r\nimport gator from '../images/gator.png';\r\n\r\nexport default class Login extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            email:\"\",\r\n            password:\"\"\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    };\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const{email, password} = this.state;\r\n        console.log(email, password);\r\n\r\n        fetch(\"http://localhost:5000/login\", {\r\n      method: \"POST\",\r\n      crossDomain:true,\r\n      headers:{\r\n        \"Content-Type\":\"application/json\",\r\n        Accept:\"application/json\",\r\n        \"Access-Control-Allow-Origin\":\"*\",\r\n      },\r\n      body:JSON.stringify({\r\n        email,\r\n        password\r\n      }),\r\n    }).then((res)=>res.json())\r\n    .then((data)=>{\r\n      console.log(data,\"userRegister\");\r\n      if(data.status==\"ok\"){\r\n        alert(\"Login was successful\");\r\n        window.localStorage.setItem(\"token\", data.data);\r\n        window.location.href=\"./welcome\"\r\n      }\r\n    });\r\n    }\r\n  render() {\r\n    return (\r\n      \r\n      <div>\r\n        <LoginBanner/>\r\n        <div className='bannerSpacer'></div>\r\n        <img className=\"gator-image\" src={gator}  />\r\n        <form onSubmit={this.handleSubmit}>\r\n          <h3 className='title-name'>Sign In</h3>\r\n\r\n          <div className=\"mb-3\">\r\n            <label>Email </label>\r\n            <input\r\n              type=\"email\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter email...\"\r\n              onChange={e=>this.setState({email:e.target.value})}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"mb-3\">\r\n            <label>Password</label>\r\n            <input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              placeholder=\"Enter password...\"\r\n              onChange={e=>this.setState({password:e.target.value})}\r\n            />\r\n          </div>\r\n\r\n          \r\n\r\n          <div className=\"d-grid\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Login\r\n            </button>\r\n          </div>\r\n          <p className=\"forgot-password text-right\">\r\n            Not registered? <a href=\"/sign-up\">Sign up!</a>\r\n          </p>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\mathl\\Documents\\Senior-Project\\GatorSecurity\\senior_project_dea-main\\src\\components\\LoginBanner.js",["95","96","97","98","99","100","101"],[],"import Container from 'react-bootstrap/Container';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { LinkContainer } from \"react-router-bootstrap\"\r\n\r\n\r\n\r\nfunction LoginBanner() {\r\n\r\nconst navbarTitle = {\r\n  color: \"white\",\r\n  fontFamily: \"Gluten\",\r\n  fontSize: \"25px\"\r\n  \r\n}\r\n\r\nconst dropdown = {\r\n  backgroundColor: \"#2613fe\"\r\n};\r\n\r\nconst dropdownItem = {\r\n  color: \"white\",\r\n  backgroundColor: \"#2613fe\",\r\n  fontFamily: \"Gluten\"\r\n \r\n};\r\n\r\nconst navLink = {\r\n  color: \"white\",\r\n  fontFamily: \"Gluten\",\r\n  fontSize: \"18px\",  \r\n  flexDirection: \"column\"\r\n  \r\n};\r\n\r\nconst linkContainer = {\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  display: \"flex\",\r\n  alignItems: \"center\"\r\n};\r\n\r\nconst navbarStyle = {\r\n  backgroundColor: '#2613fe',\r\n  height: \"80px\"\r\n};\r\n\r\n  return (\r\n    <Navbar style={navbarStyle} expand=\"lg\">\r\n      <Container>\r\n        <Navbar.Brand style={navbarTitle}>Gator Security Fundamentals</Navbar.Brand>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default LoginBanner;",{"ruleId":"102","severity":1,"message":"103","line":7,"column":27,"nodeType":"104","messageId":"105","endLine":7,"endColumn":33},{"ruleId":"102","severity":1,"message":"106","line":7,"column":50,"nodeType":"104","messageId":"105","endLine":7,"endColumn":54},{"ruleId":"107","severity":1,"message":"108","line":22,"column":77,"nodeType":"109","messageId":"110","endLine":22,"endColumn":79},{"ruleId":"102","severity":1,"message":"111","line":3,"column":104,"nodeType":"104","messageId":"105","endLine":3,"endColumn":111},{"ruleId":"107","severity":1,"message":"112","line":39,"column":21,"nodeType":"109","messageId":"110","endLine":39,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":50,"column":9,"nodeType":"115","endLine":50,"endColumn":53},{"ruleId":"113","severity":1,"message":"114","line":70,"column":9,"nodeType":"115","endLine":70,"endColumn":51},{"ruleId":"113","severity":1,"message":"114","line":80,"column":9,"nodeType":"115","endLine":80,"endColumn":49},{"ruleId":"113","severity":1,"message":"114","line":90,"column":9,"nodeType":"115","endLine":90,"endColumn":51},{"ruleId":"107","severity":1,"message":"112","line":45,"column":38,"nodeType":"109","messageId":"110","endLine":45,"endColumn":40},{"ruleId":"107","severity":1,"message":"112","line":62,"column":37,"nodeType":"109","messageId":"110","endLine":62,"endColumn":39},{"ruleId":"107","severity":1,"message":"112","line":31,"column":27,"nodeType":"109","messageId":"110","endLine":31,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":44,"column":27,"nodeType":"109","messageId":"110","endLine":44,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":56,"column":27,"nodeType":"109","messageId":"110","endLine":56,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":68,"column":27,"nodeType":"109","messageId":"110","endLine":68,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":80,"column":27,"nodeType":"109","messageId":"110","endLine":80,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":92,"column":27,"nodeType":"109","messageId":"110","endLine":92,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":104,"column":27,"nodeType":"109","messageId":"110","endLine":104,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":35,"column":21,"nodeType":"109","messageId":"110","endLine":35,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":48,"column":9,"nodeType":"115","endLine":48,"endColumn":53},{"ruleId":"102","severity":1,"message":"116","line":2,"column":8,"nodeType":"104","messageId":"105","endLine":2,"endColumn":11},{"ruleId":"102","severity":1,"message":"117","line":4,"column":8,"nodeType":"104","messageId":"105","endLine":4,"endColumn":19},{"ruleId":"102","severity":1,"message":"118","line":5,"column":10,"nodeType":"104","messageId":"105","endLine":5,"endColumn":23},{"ruleId":"102","severity":1,"message":"119","line":18,"column":7,"nodeType":"104","messageId":"105","endLine":18,"endColumn":15},{"ruleId":"102","severity":1,"message":"120","line":22,"column":7,"nodeType":"104","messageId":"105","endLine":22,"endColumn":19},{"ruleId":"102","severity":1,"message":"121","line":29,"column":7,"nodeType":"104","messageId":"105","endLine":29,"endColumn":14},{"ruleId":"102","severity":1,"message":"122","line":37,"column":7,"nodeType":"104","messageId":"105","endLine":37,"endColumn":20},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'MDBIcon' is defined but never used.","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Nav' is defined but never used.","'NavDropdown' is defined but never used.","'LinkContainer' is defined but never used.","'dropdown' is assigned a value but never used.","'dropdownItem' is assigned a value but never used.","'navLink' is assigned a value but never used.","'linkContainer' is assigned a value but never used."]